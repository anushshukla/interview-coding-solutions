async function delayedResolved() {
    return new Promise((resolve) => {
        setTimeout(() => { resolve('delayed resolve') }, 2000);
    });
}

async function resolved() {
    return 'Another resolve';
}

async function reject() {
    throw new Error('Promise rejected');
}

/**
 * @function
 * @name customAll
 * Returns a Promise that will be either resolved or rejected
 * @example Promise.customAll([delayedResolved(), resolved()])
 * // returns Promise<['delayed resolve', 'Another resolve']>
 * @example Promise.customAll([delayedResolved(), resolved(), reject()])
* // returns Promise<['delayed resolve', 'Another resolve']>
 * @param {Promise[]} promiseArr The number to raise.
 * @return {Promise} promise.
 */
Promise.__proto__.customAll = function (promiseArr) {
    return new Promise((resolve, reject) => {
        let promiseError;
        const promiseResponses = [];
        let promisesResolvedCount = 0;
        for (let index = 0; index < promiseArr.length; index++) {
                const promise = promiseArr[index];
                promise.then((response) => {
                    console.log(response, 'response');
                    promiseResponses[index] = response;
                    promisesResolvedCount++;
                }).catch((error) => {
                    promiseError = error;
                })
        }
        const interval = setInterval(function checkPromisesAreResolved() {
            if (promiseError) {
                // @ToDo cancel ongoing promises
                return reject(promiseError);
            }
            if (promisesResolvedCount === promiseArr.length) {
                clearInterval(interval);
                return resolve(promiseResponses);
            }
        }, 100);
    });
}
